{"version":3,"sources":["table/TableCell.js","table/TableRow.js","table/Table.js","configuration/Configuration.js","App.js","serviceWorker.js","index.js"],"names":["TableCell","className","this","props","cellValue","Component","TableRow","cells","rowArr","rowCells","map","value","idx","key","Math","random","Table","numCellsNeeded","numRowsNeeded","startNum","endNum","step","rows","textVertDir","textHorizDir","initTable","settings","tableConfig","isLtr","d","charAt","isUp","n","m","x","setCellsAndRowsNeeded","buildAllTableRows","min","max","ceil","range","i","push","j","row","splice","length","sort","a","b","unshift","event","configure","tableRows","onClick","w","React","Configuration","tableName","width","direction","state","initFields","target","preventDefault","confirm","parseInt","cancel","id","type","defaultValue","onChange","onNChange","bind","onXChange","onMChange","onWChange","onDChange","onConfirm","onCancel","App","directions","ltrUp","rtlUp","ltrDown","rtlDown","activeTable","showComponent","showRed","showGreen","showBlue","red","green","blue","render","style","onRedConfigure","onGreenConfigure","onBlueConfigure","setState","onRedChange","onGreenChange","onBlueChange","waitForStateChange","setTimeout","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2f521144.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './TableCell.css';\r\n\r\nexport class TableCell extends Component {\r\n  /**\r\n   * Note the class added if there is a null value\r\n   */\r\n  render() {\r\n    return (\r\n      <div className={this.props.cellValue == null ? \"table-cell no-value\" : \"table-cell\"} >\r\n        <span className=\"contents\">\r\n          {this.props.cellValue}\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './TableRow.css';\r\nimport { TableCell } from './TableCell';\r\n\r\nexport class TableRow extends Component {\r\n  cells = []\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.cells = props.rowArr;\r\n  }\r\n\r\n  // We give a random key b/c some cels are duplicates (null)\r\n  render() {\r\n    const rowCells = this.cells.map((value, idx) => {\r\n      return <TableCell key={Math.random()} \r\n                        cellValue={value} />\r\n    })\r\n    return (\r\n      <div className=\"table-row\">\r\n        {rowCells}\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport './Table.css'\r\nimport { TableRow } from './TableRow';\r\n\r\nexport class Table extends React.Component {\r\n  tableConfig;\r\n\r\n  numCellsNeeded = 0;\r\n  numRowsNeeded = 0;\r\n\r\n  startNum = 0;\r\n  endNum = 0;\r\n  step = 1\r\n\r\n  rows = [];\r\n  textVertDir = true;\r\n  textHorizDir = true;\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.initTable(this.props);\r\n  }\r\n\r\n  /**\r\n   * Set some internal variables based on the incoming props\r\n   * @param {*} settings \r\n   */\r\n  initTable(settings) {\r\n    this.tableConfig = settings.settings;\r\n\r\n    this.isLtr = settings.settings.d.charAt(0) === \"L\";\r\n    this.isUp = settings.settings.d.charAt(4) === \"U\";\r\n    this.startNum = settings.settings.n;\r\n    this.endNum = settings.settings.m;\r\n    this.step = settings.settings.x;\r\n\r\n    this.setCellsAndRowsNeeded(settings.settings.n, settings.settings.m, settings.settings.x);\r\n    this.buildAllTableRows();\r\n  }\r\n\r\n  /**\r\n   * Helper to determine how many total cells are needed, \r\n   * and how many rows of five are needed for the table.\r\n   * @param {*} min \r\n   * @param {*} max \r\n   * @param {*} step \r\n   */\r\n  setCellsAndRowsNeeded(min, max, step) {\r\n    this.numCellsNeeded = Math.ceil((max - min + 1) / step);\r\n    this.numRowsNeeded = Math.ceil(this.numCellsNeeded / 5);\r\n  }\r\n\r\n  /**\r\n   * Builds all of the individual rows of the table\r\n   * This method does not work for negative step values (counting down)\r\n   */\r\n  buildAllTableRows() {\r\n    // temp variable for flopping purposes\r\n    let isLtr = this.isLtr;\r\n\r\n    // make an array of all the values\r\n    let range = []\r\n    for (let i = 0; i < this.numCellsNeeded; i++) {\r\n      range.push(this.startNum + (i * this.step));\r\n    }\r\n\r\n    // now cut it up into rows of five\r\n    for (let j = 0; j < this.numRowsNeeded; j++) {\r\n      let row = range.splice(0, 5);\r\n      // reverse the array of its Right-to-Left\r\n      if (!isLtr) {\r\n        row = row.sort((a, b) => { return b - a });\r\n        // pad the null values\r\n        while (row.length < 5) {\r\n          row.unshift(null);\r\n        }\r\n      } else {\r\n        while (row.length < 5) {\r\n          row.push(null);\r\n        }\r\n      }\r\n      // add the row to the array based on vertical direction\r\n      if (this.isUp) {\r\n        this.rows.unshift(row);\r\n      } else {\r\n        this.rows.push(row);\r\n      }\r\n      // flop the cell direction at the end of a line\r\n      isLtr = !isLtr\r\n    }\r\n  }\r\n\r\n  onConfigure(event) {\r\n    this.props.configure(this.tableConfig);\r\n  }\r\n\r\n  render() {\r\n    const tableRows = this.rows.map((value) => {\r\n      return <TableRow key={Math.random()} rowArr={value} />;\r\n    })\r\n    return (\r\n      <div className=\"table\">\r\n        <section className=\"rows\">\r\n          {tableRows}\r\n        </section>\r\n        <section className=\"info\">\r\n          <button className=\"configure-btn\"\r\n            onClick={() => this.props.configure(this.tableConfig)}>\r\n            Configure\r\n          </button>\r\n          <span className=\"width-indicator\">\r\n            {this.props.settings.w}%\r\n          </span>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport './Configuration.css';\r\n\r\nexport class Configuration extends Component {\r\n  tableName = '';\r\n  min = 0;\r\n  max = 0;\r\n  step = 0;\r\n  width = 20;\r\n  direction = 'LTR-UP'\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props;\r\n    this.initFields(props.settings);\r\n  }\r\n\r\n  /**\r\n   * Initialize the show form fields, if there is a value to populate the field with\r\n   * @param {*} settings \r\n   */\r\n  initFields(settings) {\r\n    this.tableName = settings && settings.tableName ? settings.tableName : null;\r\n    this.min = settings && settings.n ? settings.n : null;\r\n    this.max = settings && settings.m ? settings.m : null;\r\n    this.step = settings && settings.x ? settings.x : null;\r\n    this.width = settings && settings.w ? settings.w : null;\r\n    this.direction = settings && settings.d ? settings.d : null;\r\n  }\r\n\r\n  onNChange(event) {\r\n    this.min = event.target.value;\r\n  }\r\n\r\n  onXChange(event) {\r\n    this.step = event.target.value;\r\n  }\r\n\r\n  onMChange(event) {\r\n    this.max = event.target.value;\r\n  }\r\n\r\n  onWChange(event) {\r\n    this.width = event.target.value;\r\n  }\r\n\r\n  onDChange(event) {\r\n    this.direction = event.target.value;\r\n  }\r\n\r\n  /**\r\n   * Prevent default form submit and package values for use in the table\r\n   * @param {*} event \r\n   */\r\n  onConfirm(event) {\r\n    event.preventDefault();\r\n    this.props.confirm({\r\n      tableName: this.tableName,\r\n      n: parseInt(this.min),\r\n      x: parseInt(this.step),\r\n      m: parseInt(this.max),\r\n      w: parseInt(this.width),\r\n      d: this.direction,\r\n    });\r\n  }\r\n\r\n  onCancel(event) {\r\n    event.preventDefault();\r\n    this.state.cancel();\r\n  }\r\n\r\n  /**\r\n   * This component could be broken down and provided with custom validations in the number fields\r\n   */\r\n  render() {\r\n    return (\r\n      <form id=\"config-form\" className=\"config-fields\">\r\n        <div className=\"label-field table-name\">\r\n          <label className=\"config-label\">Table: </label>\r\n          <span className={this.tableName}>{this.tableName}</span>\r\n        </div>\r\n        <div className=\"label-field\">\r\n          <label className=\"config-label\">N =</label>\r\n          <input type=\"number\"\r\n                 step=\"1\"\r\n                 className=\"config-field\"\r\n                 defaultValue={this.min}\r\n                 onChange={this.onNChange.bind(this)} />\r\n        </div>\r\n        <div className=\"label-field\">\r\n          <label className=\"config-label\">X =</label>\r\n          <input type=\"number\"\r\n                 step=\"1\"\r\n                 className=\"config-field\"\r\n                 defaultValue={this.step} \r\n                 onChange={this.onXChange.bind(this)}/>\r\n        </div>\r\n        <div className=\"label-field\">\r\n          <label className=\"config-label\">M =</label>\r\n          <input type=\"number\"\r\n                 step=\"1\"\r\n                 className=\"config-field\"\r\n                 defaultValue={this.max} \r\n                 onChange={this.onMChange.bind(this)}/>\r\n        </div>\r\n        <div className=\"label-field\">\r\n          <label className=\"config-label\">W =</label>\r\n          <input type=\"number\"\r\n                 step=\"1\"\r\n                 min=\"10\"\r\n                 max=\"100\"\r\n                 className=\"config-field\"\r\n                 defaultValue={this.width} \r\n                 onChange={this.onWChange.bind(this)}/>\r\n          <span className=\"config-label\">%</span>\r\n        </div>\r\n        <div className=\"label-field\">\r\n          <label className=\"config-label\">D =</label>\r\n          <select className=\"config-field\"\r\n                  defaultValue={this.direction}\r\n                  onChange={this.onDChange.bind(this)}>\r\n            <option value=\"LTR-UP\">LTR-UP</option>\r\n            <option value=\"RTL-UP\">RTL-UP</option>\r\n            <option value=\"LTR-DOWN\">LTR-DOWN</option>\r\n            <option value=\"RTL-DOWN\">RTL-DOWN</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"button-row\">\r\n          <button onClick={this.onConfirm.bind(this)}>OK</button>\r\n          <button onClick={this.onCancel.bind(this)}>Cancel</button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { Table } from './table/Table'\r\nimport { Configuration } from './configuration/Configuration';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  directions = {\r\n    ltrUp: 'LTR-UP',\r\n    rtlUp: 'RTL-UP',\r\n    ltrDown: 'LTR-DOWN',\r\n    rtlDown: 'RTL-DOWN',\r\n  };\r\n\r\n  /**\r\n   * Default state object. This could be abstracted to a separate file.\r\n   */\r\n  state = {\r\n    activeTable: null,\r\n    showComponent: false,\r\n    showRed: true,\r\n    showGreen: true,\r\n    showBlue: true,\r\n    red: {\r\n      tableName: \"red\",\r\n      n: 8,\r\n      x: 1,\r\n      m: 29,\r\n      w: 20,\r\n      d: this.directions.ltrUp\r\n    },\r\n    green: {\r\n      tableName: \"green\",\r\n      n: 231,\r\n      x: 1,\r\n      m: 247,\r\n      w: 30,\r\n      d: this.directions.ltrUp\r\n    },\r\n    blue: {\r\n      tableName: \"blue\",\r\n      n: 47,\r\n      x: 2,\r\n      m: 81,\r\n      w: 40,\r\n      d: this.directions.rtlUp\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.onRedConfigure = this.onRedConfigure.bind(this);\r\n    this.onRedChange = this.onRedChange.bind(this);\r\n    this.onGreenConfigure = this.onGreenConfigure.bind(this);\r\n    this.onGreenChange = this.onGreenChange.bind(this);\r\n    this.onBlueConfigure = this.onBlueConfigure.bind(this);\r\n    this.onBlueChange = this.onBlueChange.bind(this);\r\n  }\r\n\r\n  /**\r\n   * The configures all follow the same pattern: wait for rendering,\r\n   * then show the configuration component using the correct state property\r\n   * an animation here could ease the transition.\r\n   */\r\n  onRedConfigure() {\r\n    this.waitForStateChange();\r\n    this.setState({\r\n      activeTable: this.state.red,\r\n      showComponent: !this.state.showComponent,\r\n      confirm: this.onRedChange,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Table changes are all handled similarly: set the active table to null,\r\n   * close the configuration, then force a redraw.\r\n   * an animation here could ease the transition.\r\n   * @param {*} tableConfig \r\n   */\r\n  onRedChange(tableConfig) {\r\n    this.setState({ showRed: false });\r\n    if (this.state.activeTable) {\r\n      setTimeout(() => {\r\n        this.setState({\r\n          activeTable: null,\r\n          showRed: true,\r\n          showComponent: false,\r\n          confirm: null,\r\n          red: tableConfig,\r\n        });\r\n      }, 10);\r\n    }\r\n  }\r\n\r\n  onBlueConfigure() {\r\n    this.waitForStateChange();\r\n    this.setState({\r\n      activeTable: this.state.blue,\r\n      showComponent: !this.state.showComponent,\r\n      confirm: this.onBlueChange,\r\n    })\r\n  }\r\n\r\n  onBlueChange(tableConfig) {\r\n    this.setState({ showBlue: false });\r\n    if (this.state.activeTable) {\r\n      setTimeout(() => {\r\n        this.setState({\r\n          activeTable: null,\r\n          showBlue: true,\r\n          showComponent: false,\r\n          confirm: null,\r\n          blue: tableConfig\r\n        })\r\n      }, 10);\r\n    }\r\n  }\r\n\r\n  onGreenConfigure() {\r\n    this.waitForStateChange();\r\n    this.setState({\r\n      activeTable: this.state.green,\r\n      showComponent: !this.state.showComponent,\r\n      confirm: this.onGreenChange,\r\n    })\r\n  }\r\n\r\n  onGreenChange(tableConfig) {\r\n    this.setState({ showGreen: false });\r\n    if (this.state.activeTable) {\r\n      setTimeout(() => {\r\n        this.setState({\r\n          activeTable: null,\r\n          showGreen: true,\r\n          showComponent: false,\r\n          confirm: null,\r\n          green: tableConfig,\r\n        })\r\n      }, 10);\r\n    }\r\n  }\r\n\r\n  waitForStateChange() {\r\n    if (this.state.showComponent) {\r\n      setTimeout(() => {\r\n        this.setState({ showComponent: !this.state.showComponent });\r\n      }, 10);\r\n    }\r\n  }\r\n\r\n  render = function () {\r\n    return (\r\n      <div className=\"App\">\r\n        <section className=\"table-container\">\r\n          {this.state.showRed ? <div style={{width: `${this.state.red.w}%`}} className=\"tbl red-table\">\r\n            <Table settings={this.state.red}\r\n              configure={this.onRedConfigure} />\r\n          </div> : null}\r\n          {this.state.showGreen ? <div style={{width: `${this.state.green.w}%`}} className=\"tbl green-table\">\r\n            <Table settings={this.state.green}\r\n              configure={this.onGreenConfigure} />\r\n          </div> : null}\r\n          {this.state.showBlue ? <div style={{width: `${this.state.blue.w}%`}} className=\"tbl blue-table\">\r\n            <Table settings={this.state.blue}\r\n              configure={this.onBlueConfigure} />\r\n          </div> : null}\r\n        </section>\r\n        <section className=\"config-container\">\r\n          <div className=\"config-panel\">\r\n            {this.state.showComponent ? <Configuration settings={this.state.activeTable}\r\n              confirm={this.state.confirm} cancel={() => {this.setState({showComponent: !this.state.showComponent})}} /> : null}\r\n          </div>\r\n        </section>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}